- here, routines are "exercises"
- exercises ARE NOT study materials
- you do "exercises" everyday if you have time to spare
- "exercises" are use for "daily execution" to remove skill decay, achieve mastery, and job interview preparedness
- "exercises" for job interview preparedness "anytime anywhere"
- exercise has a "contained" specific goal 
- exercise may have "steps" to finish the said exercise
- pervious exercise should mostly prepare you for the next exercise
- exercise are arrange from top the easiest to hardest at the bottom
- "futured decayed self" is expected to slowly repeat an exercise and proceed to the next if skill/knowledge and time are ready
- improve and insert more exercise as time goes on






> exercise n - 
	/*
		Goals:
			- 
		Requirements:
			- 
		Notes:
			- after completing this, you should be able to fastly
				- create a basic django website that has crud create by a admin login user
				- able to freely use other UI templates
			- this exercise can be extended further to add below that we already have in other portfolios
				- cli crud data
				- profile page
				- update profile
				- register new user
				- reset password
				- check user posts
				- crud media library
				- improve post content to display html
	*/



> exercise n - check if python and pip exist/version
	/*
		Goals:
			- a quick check to see if we have python, if not, go to python website and install it first
		Requirements:
			- 
		Notes:
			- 
	*/
	- step n
		> python --version
		> pip --version



> exercise n - setup virtual environment
	/*
		Goals:
			- 
		Requirements:
			- 
		Notes:
			- 
	*/
	- step n
		> mkdri projName
		> cd projName
		> python -m venv env

		# in windows
		> env\Scripts\activate

		# in linux
		> source env/bin/activate



> exercise n - setup project
	/*
		Goals:
			- 
		Requirements:
			- env should already be running
		Notes:
			- 
	*/
	- step n - install django
		> pip install django

	- step n - install crispy
		> pip install django-crispy-forms
		> pip install crispy-bootstrap4

	- step n -
		> django-admin startproject core
		> cd core
		> code .
		>
		> xdg-open .

	- step n - migrate
		> python manage.py makemigrations
		> python manage.py migrate

	- step n - superuser
		> python manage.py createsuperuser

	- step n - startapp apps
		> python manage.py startapp pages
		> python manage.py startapp users
		> python manage.py startapp posts

	- step n - settings.py
		import os
		...
		INSTALLED_APPS = [
			...
		    'crispy_forms',
		    'crispy_bootstrap4',
		    'core',
		    'pages',
		    'users',
		    'posts',
		]
		TEMPLATES = [
		    {
		        ...,
		        'DIRS': [
		            BASE_DIR / 'templates'
		        ],
		        ...,
		    },
		]
		STATIC_URL = '/static/'
		STATIC_ROOT = os.path.join(BASE_DIR, 'static')
		MEDIA_URL = '/media/'
		MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
		CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap4"
		CRISPY_TEMPLATE_PACK = "bootstrap4"
		# do this if you use from django.contrib.auth import views as auth_views to manage your login
		# so that django will not redirect to profile "default" after logging in
		LOGIN_REDIRECT_URL = 'posts-home'
		# users get redirected here if trying to access page that needs authentication
		LOGIN_URL = 'login'



> exercise n - prep folder structure and files
	/*
		Goals:
			- 
		Requirements:
			- 
		Notes:
			- leave files as empty for now
			- you can add code in main.js to confirm it was loaded properly later
	*/
	- step n
		project01/core/core/static/img/
		project01/core/core/static/css/
		project01/core/core/static/css/main.css
		project01/core/core/static/js/
		project01/core/core/static/js/main.js
		project01/core/core/templates/
		project01/core/core/templates/base.html
		- 
		project01/core/pages/
		project01/core/pages/static/
		project01/core/pages/static/pages/
		project01/core/pages/static/pages/img/
		project01/core/pages/static/pages/css/
		project01/core/pages/static/pages/css/style.css
		project01/core/pages/static/pages/js/
		project01/core/pages/static/pages/js/script.js
		project01/core/pages/templates/
		project01/core/pages/templates/pages/
		project01/core/pages/templates/pages/about.html
		- 
		project01/core/users/
		project01/core/users/templates/
		project01/core/users/templates/users/
		project01/core/users/templates/users/login.html
		project01/core/users/templates/users/logout.html
		-
		project01/core/posts/
		project01/core/posts/static/
		project01/core/posts/static/posts/
		project01/core/posts/static/posts/img/
		project01/core/posts/static/posts/css/
		project01/core/posts/static/posts/css/style.css
		project01/core/posts/static/posts/js/
		project01/core/posts/static/posts/js/script.js
		project01/core/posts/templates/
		project01/core/posts/templates/posts/
		project01/core/posts/templates/posts/home.html
		project01/core/posts/templates/posts/post_detail.html
		project01/core/posts/templates/posts/post_form.html
		project01/core/posts/templates/posts/post_confirm_delete.html



> exercise n - prep model
	/*
		Goals:
			- 
		Requirements:
			- 
		Notes:
			- 
	*/
	- step n - posts/models.py
		from django.db import models
		from django.utils import timezone
		from django.contrib.auth.models import User
		from django.urls import reverse

		class Post(models.Model):
		    title = models.CharField(max_length=100)
		    content = models.TextField()
		    date_posted = models.DateTimeField(default=timezone.now)
		    author = models.ForeignKey(User, on_delete=models.CASCADE)

		    def __str__(self):
		        return self.title

		    def get_absolute_url(self):
		        return reverse('posts-detail', kwargs={'pk': self.pk})

	- step n
		> python manage.py makemigrations
		> python manage.py migrate



> exercise n - prep admin
	/*
		Goals:
			- 
		Requirements:
			- 
		Notes:
			- 
	*/
	- step n - posts/admin.py
		from django.contrib import admin
		from .models import Post

		admin.site.register(Post)



> exercise n - prep forms
	/*
		Goals:
			- 
		Requirements:
			- 
		Notes:
			- 
	*/
	- step n - users/forms.py
		from django import forms
		from django.contrib.auth.models import User
		from django.contrib.auth.forms import UserCreationForm

		class UserRegisterForm(UserCreationForm):
		    email = forms.EmailField()

		    class Meta:
		        model = User
		        fields = ['username', 'email', 'password1', 'password2']



> exercise n - cli - crud data
	/*
		Goals:
			- 
		Requirements:
			- 
		Notes:
			- 
	*/
	- step n -
		#
		> cd projname/core
		> python manage.py shell
		> from posts.models import Post
		> Post.objects.all()
		>
		> from django.contrib.auth import get_user_model
		> User = get_user_model()
		> User.objects.all()
		> admin = User.objects.get(username='admin')
		> print(admin)
		>
		> user1 = User.objects.create_user(username='test1', email='test1@yahoo.com', password='p1234')
		> superuser2 = User.objects.create_superuser(username='admin2', email='admin2@yahoo.com', password='1234')
		>
		> User.objects.all()
		>
		> post1 = Post.objects.create(title='Dummy Post 1', content='This is a dummy post for 1.', author=user1)
		> post2 = Post.objects.create(title='Dummy Post 2', content='Another Post', author=user1)
		>
		> Post.objects.all()
		>
		> exit()



> exercise n - prep templates
	/*
		Goals:
			- 
		Requirements:
			- 
		Notes:
			- 
	*/
	- step n - core/templates/base.html
		#
		{% load static %}
		<!DOCTYPE html>
		<html>
		<head>
		    <!-- Required meta tags -->
		    <meta charset="utf-8">
		    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
		    <!-- Bootstrap CSS -->
		    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
		    <!-- Include common stylesheets -->
		    <link rel="stylesheet" type="text/css" href="{% static 'css/main.css' %}">
		    <!-- Include specific stylesheets from child templates -->
		    {% block styles %}
		    {% endblock %}
		    <title>{% block title %}Site Title{% endblock %}</title>
		</head>
		<body>
		    <header class="site-header">
		      <nav class="navbar navbar-expand-md bg-vitamin fixed-top">
		        <div class="container">
		          <a class="navbar-brand mr-4" href="{% url 'posts-home' %}">SiteName</a>
		          <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarToggle" aria-controls="navbarToggle" aria-expanded="false" aria-label="Toggle navigation">
		          <span class="navbar-toggler-icon"></span>
		          </button>
		          <div class="collapse navbar-collapse" id="navbarToggle">
		            <div class="navbar-nav mr-auto">
		              <a class="nav-item nav-link" href="{% url 'posts-home' %}">Home</a>
		              <a class="nav-item nav-link" href="{% url 'about' %}">About</a>
		            </div>
		            <!-- Navbar Right Side -->
		            <div class="navbar-nav">
		              {% if user.is_authenticated %}
		                <a class="nav-item nav-link" href="{% url 'posts-create' %}">New Post</a>
		                <!-- <a class="nav-item nav-link" href="{% url 'logout' %}">Logout</a> -->
		                <form action="{% url 'logout' %}" method="post">
		                    {% csrf_token %}
		                    <button type="submit" class="btn btn-link">Logout</button>
		                </form>
		              {% else %}
		                <a class="nav-item nav-link" href="{% url 'login' %}">Login</a>
		                <a class="nav-item nav-link" href="#">Register</a>
		              {% endif %}
		            </div>
		          </div>
		        </div>
		      </nav>      
		    </header>
		    <main role="main" class="container">
		      <div class="row">
		        <div class="col-md-8">
		            {% block content %}{% endblock %}
		        </div>
		        <div class="col-md-4">
		            sidebar here
		        </div>
		      </div>
		    </main>
		    <footer class="footer">
		      <p>
		        footer here
		      </p>
		    </footer>    
		    <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js" integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN" crossorigin="anonymous"></script>
		    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js" integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q" crossorigin="anonymous"></script>
		    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script>
		    <!-- Include common scripts -->
		    <script src="{% static 'js/main.js' %}"></script>
		    <!-- Include specific scripts from child templates -->
		    {% block scripts %}
		    {% endblock %}
		</body>
		</html>		

	- step n - pages/templates/pages/about.html
		#
		{% extends 'base.html' %}
		{% load static %}
		{% block styles %}
		    <link rel="stylesheet" type="text/css" href="{% static 'pages/css/style.css' %}">
		{% endblock %}
		{% block content %}
		    <h1>About Us</h1>
		    <p>This is the about page.</p>
		{% endblock %}
		{% block scripts %}
		    <script src="{% static 'pages/js/script.js' %}"></script>
		{% endblock %}		

	- step n - users/templates/users/login.html
		#
		{% extends "base.html" %}
		{% load crispy_forms_tags %}
		{% block content %}
		    <form method="POST" action="">
		        {% csrf_token %}
		        <fieldset class="form-group">
		            <legend class="border-bottom mb-4">Login</legend>
		            {{ form|crispy }}
		        </fieldset>
		        <div class="form-group">
		            <button class="btn btn-outline-info" type="submit">Login</button>
		        </div>
		    </form>
		{% endblock content %}		

	- step n - users/templates/users/logout.html
		#
		{% extends "base.html" %}
		{% block content %}
		    <h2>You have been logged out</h2>
		    <div class="border-top pt-3">
		        <small class="text-muted">
		            <a class="" href="{% url 'login' %}">Log In Again</a>
		        </small>
		    </div>
		{% endblock content %}		

	- step n - posts/templates/posts/home.html
		#
		{% extends 'base.html' %}
		{% load static %}
		{% block styles %}
		    <link rel="stylesheet" type="text/css" href="{% static 'posts/css/style.css' %}">
		{% endblock %}
		{% block content %}
		    <h1>Posts</h1>
		    <br>
		    {% for post in posts %}
		    <article>
		        <h3>
		            <a href="{% url 'posts-detail' post.id %}">{{post.title}}</a>
		        </h3>
		        {{post.content}}
		    </article>
		    <br>
		    {% endfor %}
		    {% if is_paginated %}
		      {% if page_obj.has_previous %}
		        <a class="btn btn-outline-info mb-4" href="?page=1">First</a>
		        <a class="btn btn-outline-info mb-4" href="?page={{ page_obj.previous_page_number }}">Previous</a>
		      {% endif %}
		      {% for num in page_obj.paginator.page_range %}
		        {% if page_obj.number == num %}
		          <a class="btn btn-info mb-4" href="?page={{ num }}">{{ num }}</a>
		        {% elif num > page_obj.number|add:'-3' and num < page_obj.number|add:'3' %}
		          <a class="btn btn-outline-info mb-4" href="?page={{ num }}">{{ num }}</a>
		        {% endif %}
		      {% endfor %}
		      {% if page_obj.has_next %}
		        <a class="btn btn-outline-info mb-4" href="?page={{ page_obj.next_page_number }}">Next</a>
		        <a class="btn btn-outline-info mb-4" href="?page={{ page_obj.paginator.num_pages }}">Last</a>
		      {% endif %}
		    {% endif %}    
		{% endblock %}
		{% block scripts %}
		    <script src="{% static 'posts/js/script.js' %}"></script>
		{% endblock %}			

	- step n - posts/templates/posts/post_form.html
		#
		{% extends "base.html" %}
		{% load crispy_forms_tags %}
		{% block content %}
		    <form method="POST">
		        {% csrf_token %}
		        <fieldset class="form-group">
		            <legend class="border-bottom mb-4">Blog Post</legend>
		            {{ form|crispy }}
		        </fieldset>
		        <div class="form-group">
		            <button class="btn btn-outline-info" type="submit">Post</button>
		        </div>
		    </form>
		{% endblock content %}

	- step n - posts/templates/posts/post_detail.html
		#
		{% extends "base.html" %}
		{% block content %}
		  <article>
		    {{ object.author }}
		    <small class="text-muted">{{ object.date_posted|date:"F d, Y" }}</small>
		    {% if object.author == user %}
		    <div>
		        <a class="btn btn-secondary btn-sm mt-1 mb-1" href="{% url 'posts-update' object.id %}">Update</a>
		        <a class="btn btn-danger btn-sm mt-1 mb-1" href="{% url 'posts-delete' object.id %}">Delete</a>
		    </div>
		    {% endif %}
		    <h2>{{ object.title }}</h2>
		    {{ object.content }}
		  </article>
		{% endblock content %}

	- step n - posts/templates/posts/post_confirm_delete.html
		#
		{% extends "base.html" %}
		{% block content %}
		    <form method="POST">
		        {% csrf_token %}
		        <fieldset class="form-group">
		            <legend class="border-bottom mb-4">Delete Post</legend>
		            <h2>Are you sure you want to delete the post "{{ object.title }}"</h2>
		        </fieldset>
		        <div class="form-group">
		            <button class="btn btn-outline-danger" type="submit">Yes, Delete</button>
		            <a class="btn btn-outline-secondary" href="{% url 'posts-detail' object.id %}">Cancel</a>
		        </div>
		    </form>
		{% endblock content %}		

	- step n - core/static/css/main.css
		#
		body {
		    margin-top: 5rem;
		}
		.navbar a,  .navbar button{
		    color: black;
		}
		.bg-vitamin {
		    background-color: #ff9900;
		}		

	

> exercise n - prep views
	/*
		Goals:
			- 
		Requirements:
			- 
		Notes:
			- 
	*/
	- step n - pages/views.py
		#
		from django.shortcuts import render

		def about(request):
		    return render(request, 'pages/about.html')

	- step n - posts/views.py
		#
		from django.shortcuts import render, get_object_or_404
		from .models import Post
		from django.contrib.auth.models import User
		from django.contrib.auth.mixins import LoginRequiredMixin, UserPassesTestMixin
		from django.views.generic import ListView, DetailView, CreateView, UpdateView, DeleteView

		def home(request):
		    context = {
		        'posts': Post.objects.all()
		    }
		    return render(request, 'posts/home.html', context)

		class PostListView(ListView):
		    model = Post
		    # this is the default convention if you don't set the template_name
		    # <app>/<model>_<viewtype>.html
		    # posts/posts_list.html
		    template_name = 'posts/home.html'
		    context_object_name = 'posts'
		    ordering = ['-date_posted']
		    paginate_by = 5

		class UserPostListView(ListView):
		    model = Post
		    template_name = 'posts/user_posts.html'
		    context_object_name = 'posts'
		    paginate_by = 5

		    def get_queryset(self):
		        user = get_object_or_404(User, username=self.kwargs.get('username'))
		        return Post.objects.filter(author=user).order_by('-date_posted')

		class PostDetailView(DetailView):
		    model = Post
		    # this is the default convention if you don't set the template_name
		    # <app>/<model>_<viewtype>.html

		class PostCreateView(LoginRequiredMixin, CreateView):
		    model = Post
		    fields = ['title', 'content']
		    # this is the default convention if you don't set the template_name
		    # <app>/<model>_<viewtype>.html
		    # https://youtu.be/-s7e_Fy6NRU?list=PL-osiE80TeTtoQCKZ03TU5fNfx2UY6U4p&t=1304
		    # explain why the default is not post_create.html but post_form.html

		    def form_valid(self, form):
		        # get the current login user and set that to the author of this post
		        form.instance.author = self.request.user
		        return super().form_valid(form)

		# LoginRequiredMixin so that only login user can access this
		# UserPassesTestMixin so that the owner of the post can only update its own post
		class PostUpdateView(LoginRequiredMixin, UserPassesTestMixin, UpdateView):
		    model = Post
		    fields = ['title', 'content']

		    def form_valid(self, form):
		        form.instance.author = self.request.user
		        return super().form_valid(form)

		    # so that the owner of the post can only update its own post
		    def test_func(self):
		        post = self.get_object()
		        if self.request.user == post.author:
		            return True

		        return False

		class PostDeleteView(LoginRequiredMixin, UserPassesTestMixin, DeleteView):
		    model = Post
		    success_url = '/'

		    def test_func(self):
		        post = self.get_object()
		        if self.request.user == post.author:
		            return True

		        return False



> exercise n - prep urls
	/*
		Goals:
			- 
		Requirements:
			- 
		Notes:
			- 
	*/
	- step n - core/urls.py
		# 
		from django.urls import path, include
		from django.contrib import admin
		from django.contrib.auth import views as auth_views

		urlpatterns = [
		    path('admin/', admin.site.urls),
		    path('login/', auth_views.LoginView.as_view(template_name='users/login.html'), name='login'),
		    path('logout/', auth_views.LogoutView.as_view(template_name='users/logout.html'), name='logout'),
		    path('about/', include('pages.urls')),
		    path('', include('posts.urls')),
		]

	- step n - pages/urls.py
		# 
		from django.urls import path
		from . import views

		urlpatterns = [
		    path('', views.about, name='about'),
		]

	- step n - posts/urls.py
		# 
		from django.urls import path
		from .views import PostListView, PostDetailView, PostCreateView, PostUpdateView, PostDeleteView, UserPostListView

		urlpatterns = [
		    path('', PostListView.as_view(), name='posts-home'),
		    path('user/<str:username>', UserPostListView.as_view(), name='user-posts'),
		    path('post/<int:pk>/', PostDetailView.as_view(), name='posts-detail'),
		    path('post/new/', PostCreateView.as_view(), name='posts-create'),
		    path('post/<int:pk>/update/', PostUpdateView.as_view(), name='posts-update'),
		    path('post/<int:pk>/delete/', PostDeleteView.as_view(), name='posts-delete'),
		]



> exercise n - migrate again + run server
	/*
		Goals:
			- 
		Requirements:
			- 
		Notes:
			- 
	*/
	- step n
		> python manage.py makemigrations
		> python manage.py migrate

	- step n
		> python manage.py runserver



> exercise n - prep requirements
	/*
		Goals:
			- 
		Requirements:
			- 
		Notes:
			- 
	*/
	- step n -
		> pip freeze > requirements.txt
		> pip install -r requirements.txt



> exercise n - prep staticfiles
	/*
		Goals:
			- 
		Requirements:
			- 
		Notes:
			- 
	*/
	- step n -
		# Collects the static files into STATIC_ROOT
		> python manage.py collectstatic










> exercise n - nnn
	/*
		Goals:
			- 
		Requirements:
			- 
		Notes:
			- 
	*/
	- step n
		- 
	- step n
		- 



> exercise n - nnn
	/*
		Goals:
			- 
		Requirements:
			- 
		Notes:
			- 
	*/
	- step n
		- 
	- step n
		- 



> exercise n - nnn
	/*
		Goals:
			- 
		Requirements:
			- 
		Notes:
			- 
	*/
	- step n
		- 
	- step n
		- 



> exercise n - nnn
	/*
		Goals:
			- 
		Requirements:
			- 
		Notes:
			- 
	*/
	- step n
		- 
	- step n
		- 



> exercise n - nnn
	/*
		Goals:
			- 
		Requirements:
			- 
		Notes:
			- 
	*/
	- step n
		- 
	- step n
		- 



> exercise n - nnn
	/*
		Goals:
			- 
		Requirements:
			- 
		Notes:
			- 
	*/
	- step n
		- 
	- step n
		- 



> exercise n - nnn
	/*
		Goals:
			- 
		Requirements:
			- 
		Notes:
			- 
	*/
	- step n
		- 
	- step n
		- 



> exercise n - nnn
	/*
		Goals:
			- 
		Requirements:
			- 
		Notes:
			- 
	*/
	- step n
		- 
	- step n
		- 



